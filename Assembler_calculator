	LJMP	START
	ORG	100H
START:
	LCALL 	LCD_CLR
	LCALL	WAIT_KEY
	PUSH	ACC
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	MOV	A,#10
	LCALL	DELAY_100MS

	LCALL 	LCD_CLR
	LCALL	WAIT_KEY
	PUSH	ACC
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	MOV	A,#10
	LCALL	DELAY_100MS

	LCALL	LCD_CLR
	LCALL	WAIT_KEY


	CJNE	A,#10,ODEJMIJ ; porownaj A z #10, jesli rozne to skocz do odejmij
	MOV	A,#'+'
	LCALL	WRITE_DATA
	POP	ACC
	POP	00H
	ADD	A,00H
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	LJMP	$ ;- pozostań w tym miejscu
ODEJMIJ:	
	CJNE	A,#11,MNOZ
	MOV	A,#'-'
	LCALL	WRITE_DATA
	POP	00H
	POP	ACC
	CLR	C
	SUBB	A,00H
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	LJMP	$ ;- pozostań w tym miejscu
MNOZ:
	CJNE	A,#12,DZIEL
	MOV	A,#'*'
	LCALL	WRITE_DATA
	POP	ACC
	POP	B
	MUL	AB
	MOV	00H,A
	MOV	A,B
	LCALL	WRITE_HEX
	MOV	A,00H
	LCALL	WRITE_HEX
	LJMP	$ ;- pozostań w tym miejscu
DZIEL:
	CJNE	A,#13,LOOP
	MOV	A,#'/'
	POP	B
	POP	ACC
	MOV	00H,B
	DIV	AB
	MOV	01H,B
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	MOV	A,#' '
	LCALL	WRITE_DATA
	MOV	A,01H
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	MOV	A,#'/'
	LCALL	WRITE_DATA
	MOV	A,00H
	LCALL	TO_BCD
	LCALL	WRITE_HEX
	LJMP	$ ;- pozostań w tym miejscu

LOOP:
	LJMP	START


TO_BCD:
	;ZAMIANA NA BCD -POCZĄTEK
	MOV B,#10; DZIELNIK
	DIV AB; WYDZIELAMY CYFRE DZIESIATEK
	SWAP A; PRZESUWAMY CYFRĘ DZIESIĄTEK NA WYŻSZY 4 BITY
	ORL A,B; DODAJEMY CYFRĘ JEDNOŚCI
	;ZAMIANA NA BCD -KONIEC
	RET
	NOP
